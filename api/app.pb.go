// Code generated by protoc-gen-go. DO NOT EDIT.
// source: app.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// GenericData ...
type GenericData struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenericData) Reset()         { *m = GenericData{} }
func (m *GenericData) String() string { return proto.CompactTextString(m) }
func (*GenericData) ProtoMessage()    {}
func (*GenericData) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{0}
}

func (m *GenericData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericData.Unmarshal(m, b)
}
func (m *GenericData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericData.Marshal(b, m, deterministic)
}
func (m *GenericData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericData.Merge(m, src)
}
func (m *GenericData) XXX_Size() int {
	return xxx_messageInfo_GenericData.Size(m)
}
func (m *GenericData) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericData.DiscardUnknown(m)
}

var xxx_messageInfo_GenericData proto.InternalMessageInfo

func (m *GenericData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// HealthRequest ...
type HealthRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthRequest) Reset()         { *m = HealthRequest{} }
func (m *HealthRequest) String() string { return proto.CompactTextString(m) }
func (*HealthRequest) ProtoMessage()    {}
func (*HealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{1}
}

func (m *HealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthRequest.Unmarshal(m, b)
}
func (m *HealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthRequest.Marshal(b, m, deterministic)
}
func (m *HealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthRequest.Merge(m, src)
}
func (m *HealthRequest) XXX_Size() int {
	return xxx_messageInfo_HealthRequest.Size(m)
}
func (m *HealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthRequest proto.InternalMessageInfo

func (m *HealthRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// HealthReply ...
type HealthReply struct {
	Services             string   `protobuf:"bytes,1,opt,name=services,proto3" json:"services,omitempty"`
	Errors               string   `protobuf:"bytes,2,opt,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthReply) Reset()         { *m = HealthReply{} }
func (m *HealthReply) String() string { return proto.CompactTextString(m) }
func (*HealthReply) ProtoMessage()    {}
func (*HealthReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{2}
}

func (m *HealthReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthReply.Unmarshal(m, b)
}
func (m *HealthReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthReply.Marshal(b, m, deterministic)
}
func (m *HealthReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthReply.Merge(m, src)
}
func (m *HealthReply) XXX_Size() int {
	return xxx_messageInfo_HealthReply.Size(m)
}
func (m *HealthReply) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthReply.DiscardUnknown(m)
}

var xxx_messageInfo_HealthReply proto.InternalMessageInfo

func (m *HealthReply) GetServices() string {
	if m != nil {
		return m.Services
	}
	return ""
}

func (m *HealthReply) GetErrors() string {
	if m != nil {
		return m.Errors
	}
	return ""
}

// PingRequest ...
type PingRequest struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{3}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

func (m *PingRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// PingReply ...
type PingReply struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0f9056a14b86d47, []int{4}
}

func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*GenericData)(nil), "api.GenericData")
	proto.RegisterType((*HealthRequest)(nil), "api.HealthRequest")
	proto.RegisterType((*HealthReply)(nil), "api.HealthReply")
	proto.RegisterType((*PingRequest)(nil), "api.PingRequest")
	proto.RegisterType((*PingReply)(nil), "api.PingReply")
}

func init() { proto.RegisterFile("app.proto", fileDescriptor_e0f9056a14b86d47) }

var fileDescriptor_e0f9056a14b86d47 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xbb, 0xba, 0x2c, 0xee, 0x14, 0x4b, 0x99, 0x83, 0x94, 0xbd, 0x54, 0xd7, 0x8b, 0x88,
	0x04, 0x51, 0x7c, 0x00, 0x8b, 0xa5, 0x1e, 0x97, 0xfa, 0x04, 0xd3, 0x75, 0x68, 0x03, 0x6b, 0x12,
	0x93, 0xb4, 0xea, 0xbb, 0xf8, 0xb0, 0xb2, 0xd9, 0x28, 0x2b, 0x16, 0x6f, 0x99, 0x99, 0x2f, 0xf9,
	0xff, 0x3f, 0x03, 0x39, 0x19, 0x23, 0x8c, 0xd5, 0x5e, 0xe3, 0x21, 0x19, 0x59, 0x9e, 0xc1, 0x70,
	0xc1, 0x8a, 0xad, 0xac, 0x1f, 0xc8, 0x13, 0x22, 0xa4, 0xcf, 0xe4, 0x69, 0x92, 0x9c, 0x26, 0x17,
	0xf9, 0x32, 0x9c, 0xcb, 0x73, 0x38, 0x7e, 0x64, 0x6a, 0xfc, 0x66, 0xc9, 0xaf, 0x5b, 0x76, 0x7e,
	0x2f, 0x74, 0x0f, 0xc3, 0x6f, 0xc8, 0x34, 0x1f, 0x58, 0xc0, 0x91, 0x63, 0xbb, 0x93, 0x35, 0xbb,
	0x88, 0xfd, 0xd4, 0x78, 0x02, 0x19, 0x5b, 0xab, 0xad, 0x9b, 0x1c, 0x84, 0x49, 0xac, 0x5a, 0x2b,
	0x95, 0x54, 0xeb, 0xff, 0x54, 0xa6, 0x90, 0x77, 0x48, 0xab, 0xb1, 0x07, 0xb8, 0xf9, 0x4c, 0x60,
	0xf4, 0xd4, 0x09, 0xcd, 0xdf, 0xe9, 0xc5, 0x34, 0x8c, 0x57, 0x90, 0xce, 0xeb, 0x8d, 0xc6, 0xb1,
	0x20, 0x23, 0x45, 0x2f, 0x6c, 0xf1, 0xa7, 0x53, 0x0e, 0xf0, 0x1a, 0xb2, 0x2e, 0x07, 0x62, 0x98,
	0xfe, 0x4a, 0x1e, 0x6f, 0xf4, 0x82, 0x96, 0x03, 0xbc, 0x84, 0xb4, 0xf5, 0x14, 0xdf, 0xef, 0x25,
	0x28, 0x46, 0xbd, 0x4e, 0x60, 0x67, 0x77, 0x30, 0xd5, 0xdb, 0x95, 0x7c, 0x23, 0xa5, 0xc4, 0x5a,
	0x8b, 0xf8, 0x25, 0xa2, 0xd6, 0x6a, 0xc7, 0xca, 0x4b, 0xad, 0xdc, 0x6c, 0xbc, 0xb0, 0xa6, 0x8e,
	0xde, 0xab, 0x76, 0x4f, 0x55, 0xb2, 0xca, 0xc2, 0xc2, 0x6e, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x69, 0xb8, 0xce, 0x93, 0xbd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceExampleClient is the client API for ServiceExample service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceExampleClient interface {
	// Respond with what we got
	Echo(ctx context.Context, in *GenericData, opts ...grpc.CallOption) (*GenericData, error)
	// Return server health status
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error)
	// Return "pong" for "ping"
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
}

type serviceExampleClient struct {
	cc *grpc.ClientConn
}

func NewServiceExampleClient(cc *grpc.ClientConn) ServiceExampleClient {
	return &serviceExampleClient{cc}
}

func (c *serviceExampleClient) Echo(ctx context.Context, in *GenericData, opts ...grpc.CallOption) (*GenericData, error) {
	out := new(GenericData)
	err := c.cc.Invoke(ctx, "/api.ServiceExample/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceExampleClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthReply, error) {
	out := new(HealthReply)
	err := c.cc.Invoke(ctx, "/api.ServiceExample/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceExampleClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/api.ServiceExample/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceExampleServer is the server API for ServiceExample service.
type ServiceExampleServer interface {
	// Respond with what we got
	Echo(context.Context, *GenericData) (*GenericData, error)
	// Return server health status
	Health(context.Context, *HealthRequest) (*HealthReply, error)
	// Return "pong" for "ping"
	Ping(context.Context, *PingRequest) (*PingReply, error)
}

// UnimplementedServiceExampleServer can be embedded to have forward compatible implementations.
type UnimplementedServiceExampleServer struct {
}

func (*UnimplementedServiceExampleServer) Echo(ctx context.Context, req *GenericData) (*GenericData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedServiceExampleServer) Health(ctx context.Context, req *HealthRequest) (*HealthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (*UnimplementedServiceExampleServer) Ping(ctx context.Context, req *PingRequest) (*PingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

func RegisterServiceExampleServer(s *grpc.Server, srv ServiceExampleServer) {
	s.RegisterService(&_ServiceExample_serviceDesc, srv)
}

func _ServiceExample_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceExampleServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceExample/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceExampleServer).Echo(ctx, req.(*GenericData))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceExample_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceExampleServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceExample/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceExampleServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceExample_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceExampleServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServiceExample/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceExampleServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceExample_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServiceExample",
	HandlerType: (*ServiceExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ServiceExample_Echo_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _ServiceExample_Health_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ServiceExample_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app.proto",
}
